@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<h1>Dashboard</h1>
<table>
    @if(toDoItems is not null)
    {
        @foreach (var toDoItem in toDoItems)
        {
            <tr>
                <td>@toDoItem.ToDoItemId</td>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.IsCompleted</td>
                <td>@toDoItem.Description</td>
            </tr>
        }
    }
</table>

<button @onclick=SortByName>Sort By Name</button>
<button @onclick=SortByDescription>Sort By Description</button>
<button @onclick=SortById>Sort By Id</button>
<button @onclick=SortByIsCompleted>Sort By Completeness</button>

@code
{
    public void SortByName()
    {
        toDoItems?.Sort((x, y) => string.Compare(x.Name, y.Name, StringComparison.OrdinalIgnoreCase));
    }

    public void SortByDescription()
    {
        toDoItems?.Sort((x, y) => string.Compare(x.Description, y.Description, StringComparison.OrdinalIgnoreCase));
    }

    public void SortById()
    {
        toDoItems?.Sort((x, y) => x.ToDoItemId.CompareTo(y.ToDoItemId));
    }

    public void SortByIsCompleted()
    {
        toDoItems?.Sort((x, y) => x.IsCompleted.CompareTo(y.IsCompleted));
    }

    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems = [];

}
